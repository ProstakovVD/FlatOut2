///////////////////////////////////////////////////////////////////////////
// emu_car_window.sha
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 Bugbear Entertainment ltd. 
// All Rights Reserved.
// 
// Created on 13-Apr-03 11:16:26 PM
// 
// Authors: Tatu Blomberg (tatu@bugbear.fi)
///////////////////////////////////////////////////////////////////////////
Texture	Tex0;

const string inputStreamFormat = "PosNormTex1";

vertexshader vSdr = 
	decl
	{
		stream 0;
		float    v0[3];		// Position
		float	 v1[3];		// Normal
		float    v3[2];		// Tex coord 0
	}

	asm
	{
        ; Constants:
        ;  0..3 - Composite World-View-Projection Matrix
		;  4..7 - World Matrix	

		;  c32 = [R(0), 1-R(0), 0, 0]
		vs.1.1
		
		dcl_position	v0
		dcl_normal		v1
		dcl_texcoord	v3	
		
		// project position
		m4x4	oPos, v0, c0

		// R0 = rotated normal
		m3x3	r0, v1, c4
		// passthru texture coords
		mov		oT0.xy, v3.xy

		// Dot(N,L)
		dp3		r2.w, r0, c20
		// clamp to 0
		max		r2.w, r2.w, c32.w
		mov		r1.xyz, c17
		mad		oD0.rgb, c21, r2.w, r1.xyz

		; position -> world
		m4x3	r1.xyz, v0, c4
		; compute vtx->eye ray
		sub		r1.xyz, c8, r1
		dp3		r3.w, r1.xyz, r1.xyz
		rsq		r3.w, r3.w
		; normalize it
		mul		r1.xyz, r1.xyz, r3.w
		; R0 = N (normal vector)
		; R1 = V (vertex to eye vector)
	
		; 2*(V dot N)*N - V
		dp3		r0.w, r1, r0
;		add		r3.w, r0.w, r0.w
;		mad		oT1.xyz, r0.xyz, r3.w, -r1.xyz

		// Compute fresnel term approximation
		// f = r(0) + (1.0-R(0)) * pow(1.0 - dot(eye, normal), 5.0 );
		; R0 = N (normal vector)
		; R1 = V (vertex to eye vector)
		; abs(r0)
		max		r0.w, r0.w, -r0.w

		; complement: r0 = 1 - r0
		add		r0.w, c15.z, -r0.w
		mul		r1.w, r0.w, r0.w	; squared
		mul		r1.w, r1.w, r1.w	; quartic
		mul		r1.w, r1.w, r0.w	; quintic

		mad		oD0.a, r1.w, c32.y, c32.x
	};



Technique T0
{
	Pass P0
	{
		Texture[0] = <Tex0>;
		
		VertexShaderConstantF[32] = float4(0.375f, 0.625f, 1.0f, 0.0f);   // R0, 1-R1, specular power, ?
		VertexShader = <vSdr>;

		ColorArg1[0]	= Texture;		//default
		ColorOp[0]		= Modulate;		//default
		ColorArg2[0]	= Diffuse;		//default
		AlphaArg1[0]	= Diffuse;
		AlphaOp[0]		= Add;
		AlphaArg2[0]	= Texture;
	
		ColorOp[1]		= Disable;	// default
		AlphaOp[1]		= Disable;	// default
	}
}

Technique T1
{
	Pass P0
	{
		Texture[0] = <Tex0>;
		
		VertexShaderConstantF[32] = float4(0.375f, 0.625f, 1.0f, 0.0f);   // R0, 1-R1, specular power, ?
		VertexShader = <vSdr>;

		ColorArg1[0]	= Texture;		//default
		ColorOp[0]		= Modulate;		//default
		ColorArg2[0]	= Diffuse;		//default
		AlphaArg1[0]	= Diffuse;
		AlphaOp[0]		= SelectArg1;
//		AlphaArg2[0]	= Texture;
	
		ColorOp[1]		= Disable;	// default
		AlphaOp[1]		= Disable;	// default
	}
}

