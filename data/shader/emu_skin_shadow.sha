///////////////////////////////////////////////////////////////////////////
// emu_skin_shadow.sha
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2004 Bugbear Entertainment ltd. 
// All Rights Reserved.
// 
// Created on 28.9.2004 15:55:00
// 
// Authors: Tatu Blomberg (tatu@bugbear.fi)
///////////////////////////////////////////////////////////////////////////

const string inputStreamFormat = "PosNormColorTex1";

vertexshader vSdr = 
	decl
	{
		stream 0;
		float    v0[3];  // Position
		float    v1[3];  // Normal
		D3DCOLOR v2;     // "Diffuse": bone id #1, bone weight #1, bone id #2, bone weight #2
		float    v3[2];  // Tex coord 0
	}
	
	asm
	{
        ; Constants:
		;  32     - Skinning data (v2) multiplier
        ;  33..36 - Composite View-Projection Matrix
        ;  37..   - Bone=>World matrices
        
		vs.1.1
		
		dcl_position	v0
		dcl_normal		v1
		dcl_color		v2
		dcl_texcoord	v3	
	
		//def c27, 1021.8f, 1.0f, 1021.8f, 1.0f		; mul bone indexes from normalized to integer (255*4=1020 + rounding)
		
		; v0 = vertex position (model space)
		; v1 = normal (model space)
		; v2 = boneIndexAndWeight2 (D3DCOLOR)
		; c37.. bone matrix palette/array (max 16 bones)
	
		mul 	r3, v2, c32				; bone index & weight (from D3DCOLOR)
		mov		a0.x, r3.b				; 1st bone matrix index
		m4x4	r1, v0, c[a0.x + 37]	; transform by 1st bone matrix
		mov		a0.x, r3.r				; 2nd bone matrix index
		m4x4	r2, v0, c[a0.x + 37]	; transform by 2nd bone matrix

		; final vertex position = weighted position of 2 bones (in world space)
		mul		r0, r1, r3.g		; 1st bone
		mad		r0, r2, r3.a, r0	; + 2nd bone
		m4x4	oPos, r0, c33		; final world => projection
		; constant color
		mov		oD0, c95
	};

Technique T0
{
    Pass P0
    {
		VertexShaderConstantF[95] = float4( 0.75f, 0.75f, 0.75f, 0.75f );
				 
		VertexShader = <vSdr>;
		
		
		ColorArg1[0] = Diffuse;
		ColorOp[0] = SelectArg1;
		ColorArg2[0] = Diffuse;

		AlphaArg1[0] = Texture;
		AlphaOp[0] = Modulate;
		AlphaArg2[0] = Diffuse;

		ColorOp[1] = Disable;
		AlphaOp[1] = Disable;
		
	}
}

