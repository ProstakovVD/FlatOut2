///////////////////////////////////////////////////////////////////////////
// emu_default_dynamic.sha
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 Bugbear Entertainment ltd. 
// All Rights Reserved.
// 
// Created on 13-Apr-03 11:06:46 PM
// 
// Authors: Tatu Blomberg (tatu@bugbear.fi)
///////////////////////////////////////////////////////////////////////////
Texture	Tex0;

const string inputStreamFormat = "PosNormTex1";

vertexshader vSdr = 
	decl
	{
		stream 0;
		float    v0[3];		// Position
		float	 v1[3];		// Normal
		float    v3[2];		// Tex coord 0
	}
	asm
	{
        ; Constants:
        ;  0..3 - Composite World-View-Projection Matrix
		;  4..7 - World Matrix
		vs.1.1
		
		dcl_position	v0
		dcl_normal		v1
		dcl_texcoord	v3

		// passthru texture coords
		mov		oT0.xy, v3.xy
		// project position
		m4x4	oPos, v0, c0
		// rotate normal
		m3x3	r0, v1, c4
		// Compute ambient color (hemisphere lighting)
		; = t * (0.5*(ambient - black)) + ambient + 0.5*(ambient-black)
		mul		r1.xyz, r0.y, c18
		add		r1.xyz, r1.xyz, c19
//		mov		r1.xyz, c19
//		mad		r1.xyz, r0.y, c18, r1
		// Dot(N,L)
		dp3		r2.w, r0, c20
		// clamp to 0
		max		r2.w, r2.w, c15.x
		mad		oD0.rgb, c21, r2.w, r1.xyz
		mov		oD0.a, c15.z

	};


Technique T0
{
    Pass P0
    {        
		Texture[0] = <Tex0>;
	
		VertexShader = <vSdr>;

		ColorArg1[0] = Texture;
		ColorOp[0] = Modulate;
		ColorArg2[0] = Diffuse;

		AlphaArg1[0] = Texture;
		AlphaOp[0] = Modulate;
		AlphaArg2[0] = Diffuse;

		ColorOp[1] = Disable;
		AlphaOp[1] = Disable;		

	}
}