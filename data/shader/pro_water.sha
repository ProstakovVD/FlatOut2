///////////////////////////////////////////////////////////////////////////
// pro_water.sha
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 Bugbear Entertainment ltd. 
// All Rights Reserved.
// 
// Created on 16.12.2003 14:05
// 
// Authors: Timo Saarinen (timo.saarinen@bugbear.fi)
///////////////////////////////////////////////////////////////////////////
Texture	Tex0;
Texture	Tex1;
Texture	Tex2;
Texture	Tex3;

const string inputStreamFormat = "PosColor";

vertexshader vSdr =
	asm
	{
        ; Constants:
        ;  0..3 - Composite World-View-Projection Matrix
		vs.1.1
		
		dcl_position	v0
		dcl_color		v2
		
		//-------------------------------------------------
		// Interpolate to frustum quad
		//		m = c80 (X=near dir, Y=near->far dir, Z=near->far start, T=near start)
		//		v = (m[3] + z*m[2]) + x*(m[0] + z*m[1]);
		//-------------------------------------------------
;		m4x4	oPos, v0, c0
		mov		r1, c83
		mov		r2, c80
		mad 	r0.xyz, v0.z, c82, r1
		mad		r1.xyz, v0.z, c81, r2
		mad		r4.xyz, v0.x, r1.xyz, r0.xyz
		mov		r4.w, v0.w
		m4x4	oPos, r4, c0			
		
		//-------------------------------------------------
		// animated texture coordinates	(r1=scaled time)	
		//-------------------------------------------------
		mov		r0, c64
		mul		r1.zw, r0.zw, c14		
		mad		oT0.xy, r4.xz, r0.xy, r1.zw
		
		mov		r0, c65
		mul		r1.zw, r0.zw, c14
		mad		oT1.xy, r4.xz, r0.xy, r1.zw	
			
		//-------------------------------------------------
		
		; compute vtx->eye vector
		sub		r3.xyz, c8, r4
		
		; water reflection map coordinate = V
		mov		oT2.xyz, r3.xyz
		mov		oT3.xz, r3.xz
		mov		oT3.y, -r3.y	
			
		; normalize vtx->eye vector
		dp3		r2.w, r3.xyz, r3.xyz
		rsq		r2.w, r2.w	
		mul		r3.xyz, r3.xyz, r2.w		
		
		// diffuse output = V
		mad		oD0, r3.xzy, c66, c66		
	};		
	
pixelshader pSdr =
	asm
	{
		ps.1.1
				
		tex t0
		tex t1
		tex t2
		tex t3

		; normal N
		add_d2_sat	r1, t0, t1
		
		; normalize N
		dp3_sat		r0, r1_bx2, r1_bx2
		mad			r1, r1_bias, 1-r0, r1_bx2
		
		; normalize V
		dp3_sat		r0, v0_bx2, v0_bx2
		mad			r0, v0_bias, 1-r0, v0_bx2	
				
		; N.V, t3 = flat reflection, t2 = into water
		dp3_sat		r1, r1, r0
		lrp			r0, r1, t3, t2	
		
	};
	

technique t0	
{
	pass p0
    {        
		Texture[0] = <Tex0>;
		Texture[1] = <Tex1>;
		Texture[2] = <Tex2>;
		Texture[3] = <Tex3>;
			
		VertexShader = <vSdr>;
		PixelShader = <pSdr>;		
	}
}
