///////////////////////////////////////////////////////////////////////////
// emu_sunflare.sha
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2003 Bugbear Entertainment ltd. 
// All Rights Reserved.
// 
// Created on 13-Apr-03 11:34:33 PM
// 
// Authors: Tatu Blomberg (tatu@bugbear.fi)
///////////////////////////////////////////////////////////////////////////
Texture	Tex0;
Texture Tex1;

const string inputStreamFormat = "PosColorTex1";

vertexshader vSdr = 
	decl
	{
		stream 0;
		float    v0[3];  // Position
		D3DCOLOR v2;     // Diffuse
		float    v3[2];  // Tex coord 0
	}
	asm
	{
        ; Constants:
        ;  0..3 - Composite World-View-Projection Matrix
		vs.1.1
		
		dcl_position	v0
		dcl_color		v2
		dcl_texcoord	v3	
		
		m4x4	oPos, v0, c0
		mov		oD0, v2
		mov		oT0.xy, v3.xy
		mov		oT1.xy, v3.xy
	};

Technique TextureMasking
{
    Pass P0
    {        
		VertexShader = <vSdr>;
		Texture[0] = <Tex0>;
		Texture[1] = <Tex1>;
		MinFilter[1] = Point;
		MagFilter[1] = Point;

		ColorArg1[0] = Texture;
		ColorOp[0] = SelectArg1;
//		ColorArg2[0] = Diffuse;

		AlphaArg1[0] = Texture;
		AlphaOp[0] = Modulate;
		AlphaArg2[0] = Diffuse;

//		ColorArg1[1] = Texture;
		ColorOp[1] = Modulate;
		ColorArg2[1] = Current;

//		AlphaArg1[1] = Texture;
		AlphaOp[1] = SelectArg2;
		AlphaArg2[1] = Current;

		ColorOp[2] = Disable;
		AlphaOp[2] = Disable;
	}
}

Technique Fallback
{
    Pass P0
    {
		VertexShader = <vSdr>;
		Texture[0] = <Tex0>;

//		ColorArg1[0] = Texture;
		ColorOp[0] = SelectArg1;
//		ColorArg2[0] = Diffuse;

//		AlphaArg1[0] = Texture;
//		AlphaOp[0] = Modulate;
//		AlphaArg2[0] = Diffuse;

	}
}
