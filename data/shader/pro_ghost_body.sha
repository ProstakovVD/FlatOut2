///////////////////////////////////////////////////////////////////////////
// pro_ghost_body.sha
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2006 Bugbear Entertainment ltd. 
// All Rights Reserved.
// 
// Created on 26.1.2006 16:10:53
// 
// Authors: Tatu Blomberg (tatu@bugbear.fi)
///////////////////////////////////////////////////////////////////////////
Texture	Tex0;	// Base color
Texture	Tex1;	// Reflection & specular
Texture	Tex2;	// Dirt
Texture Tex3;	// Diffuse lut

const string inputStreamFormat = "PosNormColorTex1";

vertexshader vSdr = 
	decl
	{
		stream 0;
		float    v0[3];		// Position
		float	 v1[3];		// Normal
		D3DCOLOR v2;		// Diffuse		
		float    v3[2];		// Tex coord 0
	}
	asm
	{
        ; Constants:
        ;  0..3 - Composite World-View-Projection Matrix
		;  4..7 - World Matrix
		vs.1.1
		
		dcl_position	v0
		dcl_normal		v1
		dcl_color		v2
		dcl_texcoord	v3
		
		// project position
		m4x4	oPos, v0, c0
		// rotate normal
		m3x3	r0, v1, c4
		mov		oT3.xyz, r0
		// passthru texture coords
		mov		oT0.xy, v3.xy
		mov		oT2.xy, v3.xy
		
		// SH lighting
		mov		r0.w, c15.z		; w = 1.0
		dp4		r1.x, r0, c17
		dp4		r1.y, r0, c18
		dp4		r1.z, r0, c19
		; gamma correction
		rsq		r1.x, r1.x
		rsq		r1.y, r1.y
		rsq		r1.z, r1.z
		rcp		oD0.x, r1.x
		rcp		oD0.y, r1.y
		rcp		oD0.z, r1.z				
	

		; position -> world
		m4x3	r1.xyz, v0, c4
		; compute vtx->eye ray
		sub		r1.xyz, c8, r1
		dp3		r3.w, r1.xyz, r1.xyz
		rsq		r3.w, r3.w
		; normalize it
		mul		r1.xyz, r1.xyz, r3.w
		; R0 = N (normal vector)
		; R1 = V (vertex to eye vector)
	
		; R = 2*(V dot N)*N - V
		; r0.w = dot(V,N)
		dp3		r0.w, r1, r0
		add		r3.w, r0.w, r0.w
		mad		oT1.xyz, r0.xyz, r3.www, -r1.xyz

		// Compute fresnel term approximation
		// f = r(0) + (1.0-R(0)) * pow(1.0 - dot(eye, normal), 5.0 );
		; r0.w = dot(eye,normal)
		; R0 = N (normal vector)
		; R1 = V (vertex to eye vector)
		; abs(r0)
		max		r0.w, r0.w, -r0.w
		; complement: r0 = 1 - r0
		add		r0.w, c15.z, -r0.w
		mul		r1.w, r0.w, r0.w	; squared
		mul		r1.w, r1.w, r1.w	; quartic
		mul		r1.w, r1.w, r0.w	; quintic

		mad		oD0.a, r1.w, c32.y, c32.x
		// passthru damage map blend factor
		mov		oD1.a, v2
		mov		oD1.rgb, c22

	};


pixelshader pSdr =
	asm
	{
		ps.1.1

		// fetch textures
		tex		t0	; Base color
		tex		t1	; Reflection + specular alpha
		tex		t2	; Dirt
		tex		t3	; N * L
		// v0.rgb = ambient color
		// v0.a = fresnel term
		// v1.a = blend factor (t0 & t2)
		
		; blend damage map
		lrp			r0, v1.a, t2, t0

		; diffuse = directional + ambient
		mad_d2		r1.rgb, t3.a, c2, v0
		; specular term = glossy * specular intensity
		+mul		t1.a, r0.a, t1.a

		; limit overlighting
		mul_sat	r1.rgb, r1, c1
		mul_sat	r1.rgb, r1, c1.a
		
		; specular
;		mul_d2		t2.rgb, c2, t1.a
		mul			t2.rgb, v1, t1.a
		; reflectivity = glossy * fresnel
		+mul_sat	r1.a, r0.a, v0.a
		; color = texel*diffuse + specular
;		mad_x2_sat	r0.rgb, r0, r1, t2
		mul_x2_sat	r0.rgb, r0, r1
		; final blend between reflection
		lrp			r0.rgb, r1.a, t1, r0
		add_sat		r0.rgb, r0, t2
	};


Technique T0
{
    Pass P0
    {        
		VertexShaderConstantF[32] = float4(0.15f, 1.00f, 1.0f, 0.0f);   // R0, 1-R1, specular power, ?

		Texture[0] = <Tex0>;
		Texture[1] = <Tex1>;
		Texture[2] = <Tex2>;
		Texture[3] = <Tex3>;
						
		VertexShader = <vSdr>;
		PixelShader = <pSdr>;
	}
}